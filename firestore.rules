rules_version = '2';
service cloud.firestore {

  match /databases/{database}/documents {
    // Funções Auxiliares
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 0;
    }

    function isBusiness() {
      return request.auth != null && request.auth.token.role == 1;
    }

    function isBusinessManager() {
      return request.auth != null && (request.auth.token.role == 1 || request.auth.token.role == 3 );
    }

    function isShopOwner(shop) {
      return shop.data.userId == request.auth.uid;
    }

    function canAccessShop(shop) {
      return isAdmin() || (isBusiness() && isShopOwner(shop));
    }
    
    function isAuth() {
      return request.auth != null;
    }

  	// Rules for the appSettings collection
  	match /appSettings/{document=**} {
			// Allow creating documents into the appSettings collection
      allow create: if true;
      
      // Block all changes (update and delete) after creation
      allow update, delete: if false;
      
      // Allow reading (get or list) for any user
      allow read: if true;
    }
    
    // Specific rules tor the adminConfig document within appSettings
    match /appSettings/adminConfig {
    	// Allow creating adminConfig document
      allow create: if true;
      
      // Block changes to the adminConfig document
      allow update, delete: if false;
      
      // Allow any user to read the adminConfig document
      allow read: if true;
    }

    // Rules for Clients collection
    match /clients/{clientId} {
      // Permissions for others users
      allow read: if isAuth();

      // Premissions for administrators (role 0)
      allow write: if isAdmin();

      // Permissions for users with role 1 (can create, edit and read, but not delete)
      allow create, update: if isBusinessManager();

      // Rules for Clients Address collection
      match /addresses/{addressId} {
        // Permissions for others users
        allow read: if isAuth();

        // Premissions for administrators (role 0)
        allow write: if isAdmin();

        // Permissions for users with role 1 (can create, edit and read, but not delete)
        allow create, update: if isBusinessManager();
      }
    }

    // Rules for Shops collection
    match /shops/{shopId} {
      // Permissões para leitura
      allow read: if isAuth();

      // Permissões para criação
      allow create: if isAdmin() || (isBusiness() && request.resource.data.userId == request.auth.uid);

      // Permissões para atualização
      allow update: if canAccessShop(resource);

      // Permissões para deleção
      allow delete: if canAccessShop(resource);

      // Regras para a subcoleção "addresses" dentro de "shops"
      match /addresses/{addressId} {
        // Permissões para leitura
        allow read: if isAuth();

        // Permissões para leitura
        // allow read: if canAccessShop(get(/databases/$(database)/documents/shops/$(shopId)));

        // Permissões para criação e atualização
        allow create, update: if isAdmin() || (isBusiness() && isShopOwner(get(/databases/$(database)/documents/shops/$(shopId))));

        // Permissões para deleção
        allow delete: if canAccessShop(get(/databases/$(database)/documents/shops/$(shopId)));
      }
    }
  }
}
